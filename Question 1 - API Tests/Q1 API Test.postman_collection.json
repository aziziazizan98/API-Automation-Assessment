{
	"info": {
		"_postman_id": "88a18780-70da-4a70-958c-42738dfb1361",
		"name": "Q1 API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38990250"
	},
	"item": [
		{
			"name": "list of countries",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"",
							"pm.test(\"Response content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"});",
							"",
							"",
							"pm.test(\"Response is an array with at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"",
							"pm.test(\"Each object in the array has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.forEach(function(country) {",
							"        pm.expect(country).to.have.all.keys(\"CountryCode\", \"CountryName\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"CountryCode and CountryName must be non-empty strings\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.forEach(country => {",
							"        pm.expect(country.CountryCode).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"CountryCode should not be empty\");",
							"        pm.expect(country.CountryName).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"CountryName should not be empty\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url_pos_api}}/countries",
					"host": [
						"{{url_pos_api}}"
					],
					"path": [
						"countries"
					]
				}
			},
			"response": []
		},
		{
			"name": "getStateByPostcode",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"pm.test(\"Response contains required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"",
							"    responseData.forEach(item => {",
							"        pm.expect(item).to.have.all.keys('stateNm', 'stateCd', 'city', 'postCode');",
							"    });",
							"});",
							"",
							"pm.test(\"State code (stateCd) is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    responseData.forEach(function (item) {",
							"        pm.expect(item.stateCd).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"State code should not be empty\");",
							"    });",
							"});",
							"",
							"pm.test(\"The city must be a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    responseData.forEach(item => {",
							"        pm.expect(item.city).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"    });",
							"});",
							"",
							"pm.test(\"Post code is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"",
							"    responseData.forEach(item => {",
							"        pm.expect(item.postCode).to.exist.and.to.match(/^\\d{4,5}$/, \"Post code should be a 4 or 5-digit number\");",
							"    });",
							"});",
							"",
							"// Parse the JSON response body",
							"var responseBody = pm.response.json();",
							"",
							"// Verify that the response contains valid state, city, and postcode",
							"pm.test(\"Response contains valid stateNm, stateCd, city, and postCode\", function () {",
							"    const firstItem = responseBody[0]; // Access the first item in the array",
							"    let expectedStateNm = pm.iterationData.get(\"stateNm\") || pm.environment.get(\"stateNm\");",
							"    pm.expect(firstItem.stateNm).to.eql(expectedStateNm);",
							"",
							"    let expectedStateCd = pm.iterationData.get(\"stateCd\") || pm.environment.get(\"stateCd\");",
							"    pm.expect(firstItem.stateCd).to.eql(expectedStateCd);",
							"",
							"    let expectedCity = pm.iterationData.get(\"city\") || pm.environment.get(\"city\").toLowerCase().trim();",
							"    let actualCity = firstItem.city.toLowerCase().trim();",
							"    pm.expect(actualCity).to.eql(expectedCity);",
							"",
							"    let expectedPostcode = pm.iterationData.get(\"postCode\") || pm.environment.get(\"postCode\");",
							"    pm.expect(firstItem.postCode).to.eql(expectedPostcode);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"postCode\": \"{{postCode}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url_pos_api}}/getStateByPostcode",
					"host": [
						"{{url_pos_api}}"
					],
					"path": [
						"getStateByPostcode"
					]
				}
			},
			"response": []
		},
		{
			"name": "Calculate price",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"",
							"pm.test(\"Response is an array with at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"",
							"pm.test(\"Response should contain all required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.forEach(item => {",
							"        pm.expect(item).to.have.all.keys('first', 'next', 'amount', 'maxWeight', 'totalAmount', 'zone', ",
							"                                            'fuelCharge', 'handlingCharge', 'SST', 'PosCoverage', ",
							"                                            'stateFrom', 'stateTo', 'Town', 'ODA', 'ODAPrice', ",
							"                                            'SLA', 'isDomestic', 'name', 'estimateDelivery');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Amount, maxWeight, and totalAmount are non-negative numbers\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    responseData.forEach(item => {",
							"        pm.expect(item.amount).to.be.a('number').and.to.be.at.least(0, \"Amount should be a non-negative number\");",
							"        pm.expect(item.maxWeight).to.be.a('number').and.to.be.at.least(0, \"Max Weight should be a non-negative number\");",
							"        pm.expect(item.totalAmount).to.be.a('number').and.to.be.at.least(0, \"Total Amount should be a non-negative number\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"isDomestic should be a boolean value\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.forEach(item => {",
							"        pm.expect(item.isDomestic).to.be.a('boolean');",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"country\": \"Malaysia\",\r\n    \"weight\": 25,\r\n    \"postcodeFrom\": 13400,\r\n    \"postcodeTo\": 35600\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url_pos_api}}/price",
					"host": [
						"{{url_pos_api}}"
					],
					"path": [
						"price"
					]
				}
			},
			"response": []
		}
	]
}